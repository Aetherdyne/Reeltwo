namespace Reeltwo {

/** \reeltwoManualPage ServoDispatcher Servo Control

\reeltwoAutoToc

Servo Dispatch

*/

/** \reeltwoManualPage ServoDispatchPCA9685 Servo Dispatch PCA9685

\reeltwoAutoToc

Servo Dispatch PCA9685

\include servodispatch_pca9685.ino


*/

/** \reeltwoManualPage ServoDispatchDirect Servo Dispatch Direct PWM

\reeltwoAutoToc

Servo Dispatch Direct PWM

When you want to drive a limited number of servos or LEDs you can use ServoDispatchDirect. It is limited by the number of PWM outputs you have on your board.

\include servodispatch_direct.ino


*/

/** \reeltwoManualPage ServoSequencer Servo Sequencer

\reeltwoAutoToc

Servo Sequencer works in conjunction with ServoDispatcher. The sequence is held on a matrix, each line representing a step. The first entry is the
length of the step in centiseconds (1/100th of a second). The bitmap representing on/off for each servo in order in the target servo group.

\code
#include "ReelTwo.h"
#include "ServoDispatchPCA9685.h"
#include "ServoSequencer.h"

#define SMALL_PANEL        0x0001
#define MEDIUM_PANEL       0x0002
#define BIG_PANEL          0x0004
#define PIE_PANEL          0x0008
#define TOP_PIE_PANEL      0x0010
#define MINI_PANEL         0x0020

#define HOLO_HSERVO        0x1000
#define HOLO_VSERVO        0x2000

#define DOME_PANELS_MASK        (SMALL_PANEL|MEDIUM_PANEL|BIG_PANEL)
#define PIE_PANELS_MASK         (PIE_PANEL)
#define ALL_DOME_PANELS_MASK    (MINI_PANEL|DOME_PANELS_MASK|PIE_PANELS_MASK|TOP_PIE_PANEL)
#define HOLO_SERVOS_MASK        (HOLO_HSERVO|HOLO_VSERVO)

const ServoSettings servoSettings[] PROGMEM = {
    { 1,  SMALL_PANEL,   1000, 1650 },  /* 0: door 4 */
    { 2,  SMALL_PANEL,   1500, 2300 },  /* 1: door 3 */
    { 4,  SMALL_PANEL,    900, 1650 },  /* 2: door 2 */
    { 6,  SMALL_PANEL,   1200, 1900 },  /* 3: door 1 */
    { 17, MEDIUM_PANEL,  1200, 2000 },  /* 4: door 5 */
    { 9,  BIG_PANEL,     1200, 2000 },  /* 5: door 9 */
    { 8,  MINI_PANEL,    1275, 1975 },  /* 6: mini door 2 */
    { 7,  MINI_PANEL,    1550, 1900 },  /* 7: mini front psi door */
    { 3,  PIE_PANEL,     1250, 1900 },  /* 8: pie panel 1 */
    { 10, PIE_PANEL,     1075, 1700 },  /* 9: pie panel 2 */
    { 11, PIE_PANEL,     1200, 2000 },  /* 10: pie panel 3 */
    { 12, PIE_PANEL,      750, 1450 },  /* 11: pie panel 4 */
    { 5,  TOP_PIE_PANEL, 1250, 1850 },  /* 12: dome top panel */
    { 13, HOLO_HSERVO,    800, 1600 },  /* 13: horizontal front holo */
    { 14, HOLO_VSERVO,    800, 1800 },  /* 14: vertical front holo */
    { 15, HOLO_HSERVO,    800, 1600 },  /* 15: horizontal top holo */
    { 16, HOLO_VSERVO,    800, 1325 },  /* 16: vertical top holo */
    { 25, HOLO_VSERVO,    900, 1000 },  /* 17: vertical rear holo */
    { 26, HOLO_HSERVO,   1300, 1600 },  /* 18: horizontal rear holo */
};

ServoDispatchPCA9685<SizeOfArray(servoSettings)> servoDispatch(servoSettings);
ServoSequencer servoSequencer(servoDispatch);

static const ServoSequence sMySeqPanelAllOpen PROGMEM =
{
	{ 20,   B00000000, B00000000, B00000000, B00000000 },
	{ 300,  B11111111, B11000000, B00000000, B00000000 },
	{ 150,  B00000000, B00000000, B00000000, B00000000 },
};

void setup()
{
    REELTWO_READY();

    SetupEvent::ready();

	servoSequencer.play(sMySeqPanelAllOpen, SizeOfArray(sMySeqPanelAllOpen), (DOME_PANELS_MASK | PIE_PANELS_MASK));
}

void loop()
{
    AnimatedEvent::process();
}

\endcode

*/

}

