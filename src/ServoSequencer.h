#ifndef ServoSequencer_h
#define ServoSequencer_h

#include "ReelTwo.h"
#include "core/AnimatedEvent.h"
#include "ServoDispatch.h"

/**
  * \struct ServoStep
  *
  * \brief Single frame of servo animation. Time is specified in centi seconds (1/100th of a second)
  */
struct ServoStep
{
	uint16_t cs; /* centiseconds: 1/100th of a second*/
	uint8_t servo1_8;
	uint8_t servo9_16;
	uint8_t servo17_24;
	uint8_t servo25_32;
};

typedef struct ServoStep ServoSequence[];

static const ServoSequence SeqPanelAllOpen PROGMEM =
{
	{ 20,   B00000000, B00000000, B00000000, B00000000 },
	{ 300,  B11111111, B11000000, B00000000, B00000000 },
	{ 150,  B00000000, B00000000, B00000000, B00000000 },
};

static const ServoSequence SeqPanelAllOpenLong PROGMEM =
{
	{ 20,   B00000000, B00000000, B00000000, B00000000 },
	{ 1000, B11111111, B11000000, B00000000, B00000000 },
	{ 150,  B00000000, B00000000, B00000000, B00000000 },
};

static const ServoSequence SeqPanelWave PROGMEM =
{
	{ 30,   B00000000, B00000000, B00000000, B00000000 },
	{ 30,   B10000000, B00000000, B00000000, B00000000 },
	{ 30,   B01000000, B00000000, B00000000, B00000000 },
	{ 30,   B00100000, B00000000, B00000000, B00000000 },
	{ 30,   B00010000, B00000000, B00000000, B00000000 },
	{ 30,   B00001000, B00000000, B00000000, B00000000 },
	{ 30,   B00000100, B00000000, B00000000, B00000000 },
	{ 30,   B00000010, B00000000, B00000000, B00000000 },
	{ 30,   B00000001, B00000000, B00000000, B00000000 },
	{ 30,   B00000000, B10000000, B00000000, B00000000 },
	{ 30,   B00000000, B01000000, B00000000, B00000000 },
};

static const ServoSequence SeqPanelWaveFast PROGMEM =
{
	{ 15,   B00000000, B00000000, B00000000, B00000000 },
	{ 15,   B10000000, B00000000, B00000000, B00000000 },
	{ 15,   B01000000, B00000000, B00000000, B00000000 },
	{ 15,   B00100000, B00000000, B00000000, B00000000 },
	{ 15,   B00010000, B00000000, B00000000, B00000000 },
	{ 15,   B00001000, B00000000, B00000000, B00000000 },
	{ 15,   B00000100, B00000000, B00000000, B00000000 },
	{ 15,   B00000010, B00000000, B00000000, B00000000 },
	{ 15,   B00000001, B00000000, B00000000, B00000000 },
	{ 15,   B00000000, B10000000, B00000000, B00000000 },
	{ 15,   B00000000, B01000000, B00000000, B00000000 },
	{ 15,   B00000000, B00000000, B00000000, B00000000 },
	{ 15,   B00000000, B01000000, B00000000, B00000000 },
	{ 15,   B00000000, B10000000, B00000000, B00000000 },
	{ 15,   B00000001, B00000000, B00000000, B00000000 },
	{ 15,   B00000010, B00000000, B00000000, B00000000 },
	{ 15,   B00000100, B00000000, B00000000, B00000000 },
	{ 15,   B00001000, B00000000, B00000000, B00000000 },
	{ 15,   B00010000, B00000000, B00000000, B00000000 },
	{ 15,   B00100000, B00000000, B00000000, B00000000 },
	{ 15,   B01000000, B00000000, B00000000, B00000000 },
	{ 15,   B10000000, B00000000, B00000000, B00000000 },
	{ 15,   B00000000, B00000000, B00000000, B00000000 },
};

static const ServoSequence SeqPanelOpenCloseWave PROGMEM =
{
	{ 20,   B00000000, B00000000, B00000000, B00000000 },
	{ 20,   B10000000, B00000000, B00000000, B00000000 },
	{ 20,   B11000000, B00000000, B00000000, B00000000 },
	{ 20,   B11100000, B00000000, B00000000, B00000000 },
	{ 20,   B11110000, B00000000, B00000000, B00000000 },
	{ 20,   B11111000, B00000000, B00000000, B00000000 },
	{ 20,   B11111100, B00000000, B00000000, B00000000 },
	{ 20,   B11111110, B00000000, B00000000, B00000000 },
	{ 20,   B11111111, B00000000, B00000000, B00000000 },
	{ 20,   B11111111, B10000000, B00000000, B00000000 },
	{ 80,   B11111111, B11000000, B00000000, B00000000 },
	{ 20,   B01111111, B11000000, B00000000, B00000000 },
	{ 20,   B00111111, B11000000, B00000000, B00000000 },
	{ 20,   B00011111, B11000000, B00000000, B00000000 },
	{ 20,   B00001111, B11000000, B00000000, B00000000 },
	{ 20,   B00000111, B11000000, B00000000, B00000000 },
	{ 20,   B00000011, B11000000, B00000000, B00000000 },
	{ 20,   B00000001, B11000000, B00000000, B00000000 },
	{ 20,   B00000000, B11000000, B00000000, B00000000 },
	{ 20,   B00000000, B01000000, B00000000, B00000000 },
	{ 40,   B00000000, B00000000, B00000000, B00000000 },
};

static const ServoSequence SeqPanelMarchingAnts PROGMEM =
{
	// Alternating pattern of on/off
	{ 20,   B00000000, B00000000, B00000000, B00000000 },
	{ 50,   B10101010, B10000000, B00000000, B00000000 },
	{ 50,   B01010101, B01000000, B00000000, B00000000 },
	{ 50,   B10101010, B10000000, B00000000, B00000000 },
	{ 50,   B01010101, B01000000, B00000000, B00000000 },
	{ 50,   B10101010, B10000000, B00000000, B00000000 },
	{ 50,   B01010101, B01000000, B00000000, B00000000 },
	{ 50,   B10101010, B10000000, B00000000, B00000000 },
	{ 50,   B01010101, B01000000, B00000000, B00000000 },
	{ 50,   B10101010, B10000000, B00000000, B00000000 },
	{ 50,   B01010101, B01000000, B00000000, B00000000 },
	{ 50,   B10101010, B10000000, B00000000, B00000000 },
	{ 50,   B01010101, B01000000, B00000000, B00000000 },
	{ 50,   B10101010, B10000000, B00000000, B00000000 },
	{ 50,   B01010101, B01000000, B00000000, B00000000 },
	{ 50,   B10101010, B10000000, B00000000, B00000000 },
	{ 50,   B01010101, B01000000, B00000000, B00000000 },
	{ 50,   B10101010, B10000000, B00000000, B00000000 },
	{ 50,   B01010101, B01000000, B00000000, B00000000 },
	{ 50,   B10101010, B10000000, B00000000, B00000000 },
	{ 50,   B01010101, B01000000, B00000000, B00000000 },
	{ 50,   B10101010, B10000000, B00000000, B00000000 },
	{ 50,   B01010101, B01000000, B00000000, B00000000 },
	{ 50,   B10101010, B10000000, B00000000, B00000000 },
	{ 50,   B01010101, B01000000, B00000000, B00000000 },
	{ 50,   B10101010, B10000000, B00000000, B00000000 },
	{ 50,   B01010101, B01000000, B00000000, B00000000 },
	{ 50,   B10101010, B10000000, B00000000, B00000000 },
	{ 50,   B01010101, B01000000, B00000000, B00000000 },
	{ 50,   B10101010, B10000000, B00000000, B00000000 },
	{ 50,   B01010101, B01000000, B00000000, B00000000 },
	{ 100,  B00000000, B00000000, B00000000, B00000000 },
};

// 1-4 panels
// 5-6 large panels
// 7-10 pie panels
// 11-12 mini doors
// 13 pie door
static const ServoSequence SeqPanelDance PROGMEM =
{
	{ 20,   B00000000, B00000000, B00000000, B00000000 }, // 4 pie, 1 by one
	{ 45,   B00000010, B00000000, B00000000, B00000000 },
	{ 45,   B00000011, B00000000, B00000000, B00000000 },
	{ 45,   B00000011, B10000000, B00000000, B00000000 },
	{ 45,   B00000011, B11000000, B00000000, B00000000 },
	{ 45,   B00000011, B10000000, B00000000, B00000000 },
	{ 45,   B00000011, B00000000, B00000000, B00000000 },
	{ 45,   B00000010, B00000000, B00000000, B00000000 },

	{ 45,   B00000000, B00000000, B00000000, B00000000 }, // 4 side, 1 by one
	{ 45,   B10000000, B00000000, B00000000, B00000000 },
	{ 45,   B11000000, B00000000, B00000000, B00000000 },
	{ 45,   B11100000, B00000000, B00000000, B00000000 },
	{ 45,   B11110000, B00000000, B00000000, B00000000 },
	{ 45,   B01110000, B00000000, B00000000, B00000000 },
	{ 45,   B00110000, B00000000, B00000000, B00000000 },
	{ 45,   B00010000, B00000000, B00000000, B00000000 },

	{ 45,   B00000000, B00000000, B00000000, B00000000 }, // 4 pies. 2 by 2
	{ 45,   B00000010, B10000000, B00000000, B00000000 },
	{ 45,   B00000000, B00000000, B00000000, B00000000 },
	{ 45,   B00000001, B01000000, B00000000, B00000000 },
	{ 45,   B00000000, B00000000, B00000000, B00000000 },
	{ 45,   B00000011, B11000000, B00000000, B00000000 },
	{ 45,   B00000001, B01000000, B00000000, B00000000 },
	{ 45,   B00000010, B10000000, B00000000, B00000000 },

	{ 45,   B00000000, B00000000, B00000000, B00000000 }, // 2 large sides
	{ 45,   B00001000, B00000000, B00000000, B00000000 },
	{ 45,   B00000000, B00000000, B00000000, B00000000 },
	{ 45,   B00000100, B00000000, B00000000, B00000000 },
	{ 45,   B00000000, B00000000, B00000000, B00000000 },
	{ 45,   B11111100, B00000000, B00000000, B00000000 },
	{ 45,   B01111100, B00000000, B00000000, B00000000 },
	{ 45,   B00011100, B00000000, B00000000, B00000000 },

	{ 45,   B00000000, B00000000, B00000000, B00000000 }, // interleaved
	{ 45,   B01010000, B00000000, B00000000, B00000000 },
	{ 45,   B00000000, B00000000, B00000000, B00000000 },
	{ 45,   B10100000, B00000000, B00000000, B00000000 },
	{ 45,   B00000000, B00000000, B00000000, B00000000 },
	{ 45,   B00000001, B01000000, B00000000, B00000000 },
	{ 45,   B00000010, B10000000, B00000000, B00000000 },
	{ 45,   B00000001, B01000000, B00000000, B00000000 },

	{ 45,   B00000000, B00000000, B00000000, B00000000 }, // 2nd interleaved
	{ 45,   B00000011, B11000000, B00000000, B00000000 },
	{ 45,   B00000001, B01000000, B00000000, B00000000 },
	{ 45,   B00000010, B10000000, B00000000, B00000000 },
	{ 45,   B00000001, B01000000, B00000000, B00000000 },
	{ 45,   B00000010, B10000000, B00000000, B00000000 },
	{ 45,   B00000001, B01000000, B00000000, B00000000 },
	{ 45,   B10101010, B10000000, B00000000, B00000000 },

	{ 45,   B00000000, B00000000, B00000000, B00000000 }, //
	{ 45,   B00000010, B10000000, B00000000, B00000000 },
	{ 45,   B00000001, B01000000, B00000000, B00000000 },
	{ 45,   B00000010, B10000000, B00000000, B00000000 },
	{ 45,   B00000001, B01000000, B00000000, B00000000 },
	{ 45,   B10101010, B10000000, B00000000, B00000000 },
	{ 45,   B01010101, B01000000, B00000000, B00000000 },
	{ 45,   B10101010, B10000000, B00000000, B00000000 },

	{ 45,   B00000000, B00000000, B00000000, B00000000 }, //
	{ 45,   B11000000, B00000000, B00000000, B00000000 },
	{ 45,   B00110000, B00000000, B00000000, B00000000 },
	{ 45,   B00001100, B00000000, B00000000, B00000000 },
	{ 45,   B00000000, B00000000, B00000000, B00000000 },
	{ 45,   B11001100, B11000000, B00000000, B00000000 },
	{ 45,   B00110011, B00000000, B00000000, B00000000 },
	{ 45,   B11001100, B11000000, B00000000, B00000000 },

	{ 45,   B00000000, B00000000, B00000000, B00000000 }, // transition
	{ 45,   B10000000, B00000000, B00000000, B00000000 },
	{ 45,   B00000000, B00000000, B00000000, B00000000 },
	{ 45,   B01000000, B00000000, B00000000, B00000000 },
	{ 45,   B00000000, B00000000, B00000000, B00000000 },
	{ 45,   B11100000, B00000000, B00000000, B00000000 },
	{ 45,   B01100000, B00000000, B00000000, B00000000 },
	{ 45,   B00100000, B00000000, B00000000, B00000000 },
	{ 45,   B00000000, B00000000, B00000000, B00000000 },

	{ 45,   B00000010, B10000000, B00000000, B00000000 }, // good
	{ 45,   B00000000, B00000000, B00000000, B00000000 },
	{ 45,   B00000001, B01000000, B00000000, B00000000 },
	{ 45,   B00000000, B00000000, B00000000, B00000000 },
	{ 45,   B00000010, B10000000, B00000000, B00000000 },
	{ 45,   B00000001, B01000000, B00000000, B00000000 },
	{ 45,   B00000010, B10000000, B00000000, B00000000 },
	{ 45,   B00000000, B00000000, B00000000, B00000000 },
	{ 45,   B10101010, B10000000, B00000000, B00000000 },
	{ 45,   B01010101, B01000000, B00000000, B00000000 },
	{ 45,   B00000000, B00000000, B00000000, B00000000 },
	{ 45,   B11111111, B11000000, B00000000, B00000000 },
	{ 45,   B00000011, B11000000, B00000000, B00000000 },
	{ 45,   B11111100, B00000000, B00000000, B00000000 },
	{ 45,   B00000000, B00000000, B00000000, B00000000 },
	{ 45,   B00000000, B00001000, B00000000, B00000000 }, // tip of the hat
	{ 500,  B00000000, B00000000, B00000000, B00000000 },
};

static const ServoSequence SeqPanelLongDisco PROGMEM =
{
	{ 15,    B00000000, B00000000, B00000000, B00000000 },
	{ 15,    B10000000, B00000000, B00000000, B00000000 },
	{ 15,    B01000000, B00000000, B00000000, B00000000 },
	{ 15,    B00100000, B00000000, B00000000, B00000000 },
	{ 15,    B00010000, B00000000, B00000000, B00000000 },
	{ 15,    B00001000, B00000000, B00000000, B00000000 },
	{ 15,    B00000100, B00000000, B00000000, B00000000 },
	{ 15,    B00000010, B00000000, B00000000, B00000000 },
	{ 15,    B00000001, B00000000, B00000000, B00000000 },
	{ 15,    B00000000, B10000000, B00000000, B00000000 },
	{ 15,    B00000000, B01000000, B00000000, B00000000 },
	{ 15,    B00000000, B00000000, B00000000, B00000000 },
	{ 15,    B00000000, B01000000, B00000000, B00000000 },
	{ 15,    B00000000, B10000000, B00000000, B00000000 },
	{ 15,    B00000001, B00000000, B00000000, B00000000 },
	{ 15,    B00000010, B00000000, B00000000, B00000000 },
	{ 15,    B00000100, B00000000, B00000000, B00000000 },
	{ 15,    B00001000, B00000000, B00000000, B00000000 },
	{ 15,    B00010000, B00000000, B00000000, B00000000 },
	{ 15,    B00100000, B00000000, B00000000, B00000000 },
	{ 15,    B01000000, B00000000, B00000000, B00000000 },
	{ 15,    B10000000, B00000000, B00000000, B00000000 },
	{ 15,    B00000000, B00000000, B00000000, B00000000 }, // 3.45 seconds
	{ 36000, B00000000, B00000000, B00000000, B00000000 }, // 6 minutes
	{ 2200,  B00000000, B00000000, B00000000, B00000000 }, // 22 seconds
};

#define SEQUENCE_PLAY_ONCE(sequencer, sequence, groupMask) \
	sequencer.play(sequence, SizeOfArray(sequence), groupMask)

/**
  * \ingroup Core
  *
  * \class ServoSequencer
  *
  * \brief Plays a sequence of servo commands using a servo group mask
  */
class ServoSequencer : public AnimatedEvent
{
public:
	ServoSequencer(ServoDispatch& dispatch) :
        fDispatch(dispatch)
    {
    	stop();
    }

    void playVariableSpeed(const ServoStep* sequence, uint16_t length, uint32_t servoGroupMask,
    		uint16_t speedMinMS, uint16_t speedMaxMS, uint16_t minPulse = 700, uint16_t maxPulse = 2400)
    {
    	stop();
    	fSequence = (ServoStep*)sequence;
    	fServoGroupMask = servoGroupMask;
    	fLength = length;
    	fMinPulse = minPulse;
    	fMaxPulse = maxPulse;
    	fSpeedMinMS = speedMinMS;
    	fSpeedMaxMS = speedMaxMS;
    	fNextStepMS = millis();
    }

    void play(const ServoStep* sequence, uint16_t length, uint32_t servoGroupMask,
    		uint16_t speedMS = 100, uint16_t minPulse = 700, uint16_t maxPulse = 2400)
    {
    	playVariableSpeed(sequence, length, servoGroupMask, speedMS, speedMS, minPulse, maxPulse);
    }

    void stop()
    {
    	fSequence = NULL;
    	fLength = 0;
    	fNextStepMS = 0;
    }

    virtual void animate() override
    {
    	unsigned long currentTime;
    	if (fSequence == NULL || (currentTime = millis()) < fNextStepMS)
    		return;
    	if (fIndex >= fLength)
    	{
    		DEBUG_PRINTLN("SEQUENCE DONE");
    		stop();
    		return;
    	}
    	uint32_t servoSetMask = 0;
    	const ServoStep* step = &fSequence[fIndex];
    	servoSetMask |= (uint32_t)pgm_read_byte(&step->servo1_8) << 24;
    	servoSetMask |= (uint32_t)pgm_read_byte(&step->servo9_16) << 16;
    	servoSetMask |= (uint32_t)pgm_read_byte(&step->servo17_24) << 8;
    	servoSetMask |= (uint32_t)pgm_read_byte(&step->servo25_32) << 0;
    	uint32_t ms = pgm_read_word(&fSequence[fIndex].cs) * 10L;
    	fNextStepMS = currentTime + ms;
		fDispatch.moveServoSetTo(fServoGroupMask, servoSetMask, 0, fSpeedMinMS, fSpeedMaxMS, fMaxPulse, fMinPulse);
		fIndex++;
    }

private:
	ServoDispatch& fDispatch;
	ServoStep* fSequence;
	uint16_t fLength = 0;
	uint16_t fIndex = 0;
	uint16_t fMinPulse;
	uint16_t fMaxPulse;
	uint16_t fSpeedMinMS;
	uint16_t fSpeedMaxMS;
	uint32_t fServoGroupMask;
	uint32_t fNextStepMS;
};

#endif